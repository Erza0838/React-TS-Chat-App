// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Model untuk menyimpan informasi pengguna yang melakukan registrasi
model UserModel {
  // id       String  @id @default(uuid()) 
  id                 String  @id @default(cuid())
  Genders            String  @db.Char(100)
  Email              String  @db.VarChar(100)
  Username           String  @db.VarChar(100) @unique
  Password           String  @unique @db.VarChar(100)
  UserProfilePicture String? @db.VarChar(255)
  // Emoji              String? @db.VarChar(10)
  // ProfilePicture Unsupported("blob")?

  UserDescription_Reference    UserDescription[]
  UserContactIdReference      User_Contacts[]
  // Default_Username_Reference    User_Contacts[] @relation("DefaultUsernameReference")
  // User_Contacts_Id             User_Contacts[] @relation("UserContactIdReference")
  Add_Member_Grup_From_Contact Grup_List_Member_Model[] @relation("Add_Grup_Member_From_Contact")

  @@map("user")
}

model UserDescription {
  UserDescriptionId String  @id @default(uuid()) 
  UserDescription   String   @db.VarChar(255)
  UserId            String   
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  UserIdReference UserModel @relation(fields: [UserId], references: [id])
}

// Model untuk menyimpan daftar kontak user
model User_Contacts {
  Contact_Id String @id @default(uuid()) 
  ContactInformation Json? @db.Json
  MyId String 
  UserContactId  UserModel @relation(fields: [MyId], references: [id])

  PersonalChatOWnerReference Personal_Chat_Model[]
  @@map("contact_List")
}

// Model untuk melakukan operasi CRUD pada pesan obrolan pribadi
// model Personal_Chat_Feature_Model {
//   Personal_Messages_Id String @id @default(uuid())

//   Sender_Rechiever_Message_Id Personal_Chat_Model[]

//   @@map("personal_Chat_Feature")
// }

// Model untuk menyimpan obrolan pribadi
model Personal_Chat_Model {
  // Existing_Personal_Contact_Id User_Contacts @relation(fields: [Existing_Contact_Id], references: [Contacts_Id])
  // Existing_Contact_Id          String        @id @default(uuid())

  // Sender_Rechiever_Personal_Message_Id Personal_Chat_Feature_Model @relation(fields: [Personal_Message_Id], references: [Personal_Messages_Id])
  // Personal_Message_Id                  String                      @db.VarChar(255)

  // My_Messages             String    @db.Text()
  // Messages_To_All         String    @db.Text()
  Perconal_Chat_Id        String  @id @default(uuid())
  My_Messages             Json?   @db.Json
  Messages_To_All         Json?   @db.Json
  Personal_Chat_Owner_Id  String 
  // Delete_Personal_Message DateTime? @default(now())
  // Update_Personal_Message DateTime? @default(now())
  Create_Personal_Message DateTime? @default(now())
  
  Personal_Chat_Owner User_Contacts @relation(fields: [Personal_Chat_Owner_Id], references: [Contact_Id])
  @@map("personal_Chat")
}

// Model untuk melakukan operasi CRUD pada obrolan grup
model Grup_Chat_Feature_Model {
  Grup_Messages_Id String @id @default(uuid())

  Grup_Sender_Rechiever_Message_Id Grup_Chat_Information_Model[]

  @@map("Grup_Chat_Feature")
}

// Model untuk menyimpan informasi grup obrolan
model Grup_Chat_Information_Model {
  Chat_Grup_Id_References Grup_Chat_Feature_Model @relation(fields: [Chat_Grup_Id], references: [Grup_Messages_Id])
  Chat_Grup_Id            String

  // Kolom untuk mengisi informasi grup
  Grup_Chat_Information_Id String  @id @default(uuid())
  Grup_Name                String  @db.VarChar(40)
  Grup_Description         String? @db.VarChar(255)
  Role_member              String  @db.VarChar(255)
  GrupProfilePicture       String? @db.VarChar(255)

  // Kolom untuk menyimpan menyimpan dan mengelola obrolan grup
  Messages_Admin_And_Member String    @db.Text()
  Messages_To_All           String    @db.Text()
  Delete_Grup_Message       DateTime? @default(now())
  Update_Grup_Message       DateTime? @default(now())
  Create_Grup_Message       DateTime? @default(now())

  @@map("grup_chat_information")
}

// Model untuk menyimpan kontak kontak yang dimasukkan dalam grup
model Grup_List_Member_Model {
  List_Id_Grup_Members_References UserModel @relation("Add_Grup_Member_From_Contact", fields: [List_Id_Grup_Members], references: [id])
  List_Id_Grup_Members            String    @id @default(uuid())

  @@map("grup_list_member")
}
